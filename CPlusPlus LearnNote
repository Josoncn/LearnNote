###关键词

1.std::atomic<template>原子操作，atomic<bool>,atomic<int>

2._cdecl:调用约定，指定函数调用时使用的堆栈清理方式,还有_stdcall,_fastcall,_vectorcall,_thiscall。

3.inline函数修饰的函数体，内联函数。作用：在编译时会将内联函数体的代码替换到调用该函数的地方，要求时内联函数体必须简洁，无循环要不然达不到省略函数调用过程的效率。
###字符串	（stdio.h）
tips:
(1.在字符串格式化时应该传入字符串指针，比如传string时实际可能为地址，比如sprintf函数，应该传char*)

1.sprintf_s 格式化字符串并写入到指定字符数组中，但是应该保证写入时不发生缓冲区溢出
	原型：int sprintf_s(char *str, rsize_t size, const char *format, ...);
	返回值：写入到缓冲区字数，不包括终止符，如果超过缓冲区，或者失败返回-1
	参数：缓冲区指针，缓冲区大小(包括终止符)，字符串模板，字符串参数
	例：int sprintf_s(strBuffer, "%s_%lld.jpg", m_strFileName.c_str(),m_vecImageGuid[m_iCurIndex]);//这个为什么没有大小的参数能？
	
2.CString.Format 同样的可以对CString字符串对象进行参数格式化，无返回值
	原型：CString.Format(const char *format, ...)
	
3.std::to_string 将整数转化为字符串
	例：std::to_string((*m_pvec2Result)[i].first.file_index)

4.assign 用于字符串赋值，覆盖
	原型：string& assign(const string& str, size_type pos, size_type len); //源地址，开始位置，大小
	例：str2.assign(str1, 1, 3);
	
###智能指针 （memory）

1.std::shared_ptr 智能共享指针，多个指针共享，当最后一个指针指向释放时释放内存。使用make_shared创建,自动释放内存
	例：std::shared_ptr<int> sharedPtr = std::make_shared<int>(10);/std::shared_ptr<int> sharedPtr(new int(10)); //对象的创建类似

2.std::unique_ptr 是一个独占智能指针不能拷贝可以移动
	例：std::unique_ptr<CImageReader> pImageReader=nullptr;//创建方式相似

3.reset函数 用于重置智能指针，释放它们所拥有的资源
	原型：void reset(U* p = nullptr);
	例：uniquePtr->reset(new int(20));
	
###函数工具

1.std::transform 是标准库中的转换函数，传入输入范围与输出范围，操作函数。
	例：std::transform(strSuffix.begin(), strSuffix.end(), strSuffix.begin(), towlower);//towlower是一个一元操作符用于将字符更改为小写字符

2.std::chrono::steady_clock::now() 获取当前时间
	例：std::chrono::steady_clock::time_point startTime = std::chrono::steady_clock::now();
	
3.

###高级用法

1.std::move(this->task.front());移动语义，将一个对象的所有权从一个对象转移到另外一个对象，而不进行复制，常用于线程池或者异步任务队列。注源对象状态可能变为未定义的状态

2.template<class F, class... Args>
  auto ThreadPool::post(F&& f, Args&&... args)-> std::future<typename std::result_of<F(Args...)>::type>
  模板函数，->指定了返回值类型为future,根据result_of类型萃取工具，根据f和参数args推断出任务执行结果的类型
  
3.std::function<void()> f=func;函数封装，调用时使用f()

###同步与异步

1.std::condition_variable,状态锁，当满足条件之后会进行加锁
